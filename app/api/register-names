import { NextResponse } from "next/server"
import fs from "fs"
import path from "path"

// 登録済み名前のファイルパス
const REGISTERED_NAMES_FILE_PATH = path.join(process.cwd(), "data", "registered-names.json")

// 登録済み名前の型定義
interface RegisteredNamesData {
  names: string[]
}

// ディレクトリが存在しない場合は作成
function ensureDirectoryExists(filePath: string) {
  const dirname = path.dirname(filePath)
  if (!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname, { recursive: true })
  }
}

// 登録済み名前の読み込み
function readRegisteredNames(): RegisteredNamesData {
  ensureDirectoryExists(REGISTERED_NAMES_FILE_PATH)

  if (!fs.existsSync(REGISTERED_NAMES_FILE_PATH)) {
    const initialData: RegisteredNamesData = { names: [] }
    fs.writeFileSync(REGISTERED_NAMES_FILE_PATH, JSON.stringify(initialData, null, 2))
    return initialData
  }

  const data = fs.readFileSync(REGISTERED_NAMES_FILE_PATH, "utf8")
  return JSON.parse(data) as RegisteredNamesData
}

// 登録済み名前の保存
function saveRegisteredNames(data: RegisteredNamesData) {
  ensureDirectoryExists(REGISTERED_NAMES_FILE_PATH)
  fs.writeFileSync(REGISTERED_NAMES_FILE_PATH, JSON.stringify(data, null, 2))
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { name } = body

    if (!name) {
      return NextResponse.json({ error: "名前が指定されていません" }, { status: 400 })
    }

    // 登録済み名前を取得
    const registeredNames = readRegisteredNames()

    // すでに登録されている場合はエラー
    if (registeredNames.names.includes(name)) {
      return NextResponse.json({ error: "この名前はすでに登録されています" }, { status: 409 })
    }

    // 名前を登録
    registeredNames.names.push(name)
    saveRegisteredNames(registeredNames)

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error registering name:", error)
    return NextResponse.json({ error: "名前の登録に失敗しました" }, { status: 500 })
  }
}

